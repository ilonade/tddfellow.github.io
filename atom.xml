<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[That TDD Fellow | Tech Blog | Screencasts]]></title>
  <link href="http://www.tddfellow.com/atom.xml" rel="self"/>
  <link href="http://www.tddfellow.com/"/>
  <updated>2016-02-06T00:36:54+01:00</updated>
  <id>http://www.tddfellow.com/</id>
  <author>
    <name><![CDATA[Oleksii Fedorov (waterlink)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Are You Slow?]]></title>
    <link href="http://www.tddfellow.com/blog/2016/02/05/why-are-you-slow/"/>
    <updated>2016-02-05T17:09:47+01:00</updated>
    <id>http://www.tddfellow.com/blog/2016/02/05/why-are-you-slow</id>
    <content type="html"><![CDATA[<blockquote><p>We are slow because we have the worst codebase!</p></blockquote>

<h2>So why don&rsquo;t you clean it?</h2>

<blockquote><p>Because we have to go fast!</p></blockquote>

<p>I will let you figure out logical inconsistency there.</p>

<p>Ask yourself a question: how much times in your career you were slowed down by
a horrible, dirty, untested code? It doesn&rsquo;t matter who have written it,
usually, it is already there and already a fact you have to deal with.</p>

<p>If your answer was: &ldquo;Once.. or twice..&rdquo; (and your career is sufficiently long)
- you can freely stop reading this post and simply be a happy developer.</p>

<p>I was slowed down by bad code horrible amount of times. I come to be sick of
it. I don&rsquo;t want to be slow, because I am trying to go fast. I want my tool to
be clean, I want my creations to be manageable, and I don&rsquo;t want to fear the
code, I have created, or anyone else have created. And I want to go fast and
while enjoying it!</p>

<p>Trust me, I met lots of developers during my career. Not as much as heroes of
our industry have met, but <strong>enough</strong> to be able to tell you, that <strong>every
single</strong> one of them, who has any reasonable length of the career, had same
problems.</p>

<p>And that is totally not normal. Do you understand, that from the outside world,
we, as an industry, are perceived as very non-professional, because of that?
Business even came to a conclusion, that they can&rsquo;t trust us to deliver working
software - and that is how QA role was born.</p>

<p>I will ask again.</p>

<h2>So why don&rsquo;t you clean it?</h2>

<blockquote><p>My company pays me for features, not for &lt;<em>insert your statement here</em>></p></blockquote>

<p>That is very common response. And, in essence, it is the truth.</p>

<p>OK, now, let&rsquo;s think. As time passes by, after certain threshold on every
codebase, that is not clean, adding next feature costs more time, even if the
features are of roughly the same size. After 1 year of such development,
features can literally become 2-4 times more expensive. Couple of years in, and
it, practically, becomes impossible to develop anything except &ldquo;Change the
color of this button&rdquo; (or provide your own example).</p>

<h2>What does that mean?</h2>

<p>One would say: &ldquo;Features become more expensive over time&rdquo;. Business usually
sees it as: &ldquo;Arrgh, our programmers slower and slower with each month&rdquo;. So from
the business perspective, after <strong>perceived</strong> effectiveness of developers drops
by 2-4 times, why would business be willing to pay these developers the same
salary? You should be afraid of this question.</p>

<h2>Now imagine land of unicorns!</h2>

<p>Now imagine, that you started a bit slower in the beginning (like 8% slower),
but you have kept your effectiveness over time either at roughly same level, or
even have increased it over time. How hard do you think it would be to ask for
a raise, after 2 years of loyal work?</p>

<p>Not hard at all. And probably business will be doing just great (if the
business idea itself was sustainable to begin with, of course), and will be
capable of satisfying the request.</p>

<h2>Why such a thing happens?</h2>

<p>Because at the moment we are not perceived as professionals, nor as experts of
our field. We are perceived as just some coding monkeys, who you always need to
ask: &ldquo;Can this be delivered on Friday&rdquo; with intimidating tone. And we gladly
reply through our teeth: &ldquo;I will try&rdquo;, meaning &ldquo;Just go already&rdquo;; ending up on
Friday evening with: &ldquo;I tried&rdquo; - &ldquo;You have tried not enough!&rdquo;.</p>

<h2>Clean your code already!</h2>

<p>Believe me, investing 15-45 minutes every single day into increasing test code
coverage and some little refactorings will not make you any slower (you
probably already very slow, so that it will not make any perceivable
difference). Rather, over time, you (and your fellow programmers) will start to
actually being bit-by-bit faster, as long as your application (or applications)
get cleaner and cleaner.</p>

<p>It goes without saying, that you should be using proper XP (pair-programming
and TDD) techniques, while writing any new piece of code (read: new class,
module, library, package, etc.). Because it will be extremely easy to unit-test
it with near-100% test coverage. Believe me, that is easy and fun.</p>

<p>Refactoring and covering old and messy parts of an application is not fun,
though. You have to face the truth. Consider it as a chore, like the one you do
to your apartment, when you clean it on a regular basis. And as we all know,
the more you wait to clean an apartment, the harder it would be to do it. And
the function is not linear..</p>

<p>If you have a really big legacy application, you are probably in doing that
sort of thing for 2-3 years, before you can proudly call this application clean
again.</p>

<p>There is one important trick though: prioritize cleaning of parts of
application, that change often. If some part changes once half a year, you
should probably clean it once half a year too.</p>

<h2>You are hired for your expertise!</h2>

<p>Believe me, you do have all the knowledge, required to make it.</p>

<p>The only thing that stops you is your inability to say &ldquo;No&rdquo;, when &ldquo;No&rdquo; is the
correct answer from your experience and expertise point of view.</p>

<h2>Parallel example</h2>

<p>Do you know that surgeon, before any surgery, washes his hands. You not just
know, it is your expectation! In some countries if he doesn&rsquo;t, he can easily
can be put in jail.</p>

<h3>Do you know, how surgeon washes his hands?</h3>

<p>He rubs each finger from 4 different sides 10 times. That is stated in Doctors&#8217;
code of ethics. And they have to follow it, since it has power of law.</p>

<p>Why 10 times? Wouldn&rsquo;t 7 be enough, or maybe 14 should be a minimum? It doesn&rsquo;t
matter. It is a discipline, that is to be followed to the letter, and there is
no exceptions.</p>

<p>Well, he probably can rub 11 times, without getting in jail..</p>

<p>Nobody will ever ask surgeon, why he does it. Everyone expects him to do it.</p>

<h2>Back to our universe</h2>

<p>You are surgeons!</p>

<p>You are surgeons, that operate on a heart of the business.</p>

<p>With your wrong move, with your mistake, the whole business can go out of
business overnight.</p>

<p>With your wrong move, with your mistake, thousands of people can die (if you
are in certain domains).</p>

<p>So why increasing a chance of your own mistakes (and everybody else on a team)
by not cleaning the code?</p>

<p>Even if you are not in such critical domain, you are part of industry, and you
should be a great professional, just to be an example for others, who might end
up working in such crucial business domain in the future.</p>

<p>And I know, you can pull it off. And you do know it yourself.</p>

<p>So now go, and be professional, be professional for everyone around you.</p>

<h2>Thanks!</h2>

<p>This article might be a bit too rough - I believe that is the truth we face
now, as an industry. And let us be the ones fixing it!</p>

<p>I recommend reading this: <a href="http://acm.org/about/se-code">Software Engineering Code of Ethics</a>
by ACM organization (originally, created in 1999, why are we all still not
using it?!).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD #3: Kind Sort]]></title>
    <link href="http://www.tddfellow.com/blog/2016/02/04/tdd-number-3-kind-sort/"/>
    <updated>2016-02-04T01:16:18+01:00</updated>
    <id>http://www.tddfellow.com/blog/2016/02/04/tdd-number-3-kind-sort</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/TR2hKaR4zg8" frameborder="0" allowfullscreen></iframe>


<p>Recommended to watch in a full-screen and on 720p or higher quality.</p>

<h2>Script</h2>

<p>Hello, hello! I am Oleksii Fedorov, and this is the third
episode of TDD Screencast.</p>

<p>In last episode we have implemented a sorting algorithm
using TDD, without thinking about algorithm beforehand. As a
result, bubble sort have emerged.</p>

<p>We have noticed, that there is a small weird thing about
this implementation: it has unspecified behavior - mutation
of the original array.</p>

<p>So we asked, which algorithm would emerge, if we were to ban
such side-effects from our algorithm. Let&rsquo;s find out!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./watch.sh
</span><span class='line'>vim           # implement sorting algorithm</span></code></pre></td></tr></table></div></figure>


<p>I think we are done here. If you look closely, it is a
quicksort. It is not the most memory-efficient
implementation, but that is something that is simple to
optimize (instead of passing recursively arrays, pass
original array and indexes). That optimization will involve
actual mutation of the array in place, so if we want to stay
true to our specification /show test for no-side-effects/.
We will have to copy the array once, using some sort of
wrapper function.</p>

<p>Applying this optimization I leave as an exercise to you my
users.</p>

<p>In the next episode we will look into path-finding problem,
and we will see, how these techniques apply there. See you
next time! Have a nice day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test-Driven-Development Screencast #2]]></title>
    <link href="http://www.tddfellow.com/blog/2016/02/02/test-driven-development-screencast-number-2/"/>
    <updated>2016-02-02T08:28:14+01:00</updated>
    <id>http://www.tddfellow.com/blog/2016/02/02/test-driven-development-screencast-number-2</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/6XMoZ7snuKo?list=PLbNxoJawcer22UE8lT93-fX8ZYFNtoXFu" frameborder="0" allowfullscreen></iframe>


<p>Recommended to watch in a full-screen and on 720p or higher quality.</p>

<p>List of all TDD Screencasts can be <a href="http://www.tddfellow.com/blog/categories/tdd-screencasts/">found here</a>.</p>

<h2>Script</h2>

<p>Hello, hello! I am Oleksii Fedorov, and this is the second episode of
Test-Driven-Development Screencast.</p>

<p>Now that I think about it, first episode was more of an audio podcast (with two
and half visual slides), rather than a screencast. Don&rsquo;t worry - this episode
will be full of code and actual action time on the screen.</p>

<p>Today we are going to implement a sorting algorithm. We will not come up with
algorithm beforehand and we will simply let it emerge by itself, while we are
doing TDD.</p>

<p>Lets jump in!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./watch.sh  # So I have here small script, that will watch changes in my code
</span><span class='line'>            # and will run all my tests. Additionally, it will show me the
</span><span class='line'>            # result in the notification bar (you will see, shortly).
</span><span class='line'>
</span><span class='line'>vim         # 1) Create test file
</span><span class='line'>            # 2) Follow TDD rules to the letter</span></code></pre></td></tr></table></div></figure>


<p>I think we are done here. And notice, that this is a bubble sort algorithm. Now
lets ask a question, why the worst possible algorithm have emerged, while we
were using TDD. That is an interesting question.</p>

<p>But first, lets ask ourselves a question: Are we kind to the user of our
function? The answer is - NO. We are mutating the argument, that user passed to
us. And this mutation might be unexpected. At least our test suite doesn&rsquo;t even
mention such behavior.</p>

<p>The root of the problem is this little swap operation that we have here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># show swap operation on the screen
</span><span class='line'>a[0], a[1] = {a[1], a[0]}</span></code></pre></td></tr></table></div></figure>


<p>I wonder, what will happen if we were to ban swap operation (and any kind of
mutation of the argument of the function), and implement sorting algorithm
again?</p>

<p>Find out next time, on the next episode of Test-Driven-Development! Have a good
day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test-Driven-Development Screencast #1]]></title>
    <link href="http://www.tddfellow.com/blog/2016/02/02/test-driven-development-screencast-number-1/"/>
    <updated>2016-02-02T07:59:25+01:00</updated>
    <id>http://www.tddfellow.com/blog/2016/02/02/test-driven-development-screencast-number-1</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/QnEvjrszst4?list=PLbNxoJawcer22UE8lT93-fX8ZYFNtoXFu" frameborder="0" allowfullscreen></iframe>


<p>Recommended to watch in a full-screen and on 720p or higher quality.</p>

<p>List of all TDD Screencasts can be <a href="http://www.tddfellow.com/blog/categories/tdd-screencasts/">found here</a>.</p>

<h2>Script</h2>

<p>Hello! I am Oleksii Fedorov, and this is the first episode of
Test-Driven-Development Screencast.</p>

<p>Today, I am going to briefly address following questions about
Test-Driven-Development:
- What TDD is?
- What are main benefits of doing TDD?</p>

<p>At the end I am going to demonstrate a small example on how to implement simple
sorting algorithm using TDD.</p>

<p>Let me open my slides. Don&rsquo;t worry: there are only three small slides.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim ./slides/*</span></code></pre></td></tr></table></div></figure>


<p>TDD is Software Development discipline. Therefore, basic rules, defined by TDD,
are arbitrary, weird and are to be followed to the letter, if you want it to be
useful. There is a reason for that – but we will talk shortly about that. Let
me read these basic rules for you:</p>

<ol>
<li><p>You are not allowed to write a line of production code, unless test fails.</p>

<p>Which means, that I will have to write the test even before I have something
to test. It may sound stupid. Maybe, it is stupid. Maybe, it is not.</p>

<p>But the next rule is even more weird than the first one:</p></li>
<li><p>You are not allowed to write more of a test, that is sufficient to fail.</p>

<p>It is important to clarify, what ˝fail˝ means in this context. It means test
expectation failure, and compilation/parsing/interpretation failure
(depending if your programming language is compiled or interpreted).</p>

<p>Which means, that you will have to interrupt yourself, while writing a test,
because you have mentioned the class or package, that does not exist yet. Or
you have mentioned the method or function, that does not exist yet.</p>

<p>Now that may sound really stupid to you. Bear with me, and lets see how
weird the last rule is:</p></li>
<li><p>You are not allowed to write more production code, that is sufficient to
make the failing test pass.</p>

<p>Which means, that once you have defined a class, that was mentioned - you
have just fixed a failing test, and you have to go back and write more of
the test, or add new test.</p>

<p>Which means, that once you have defined a method, that was mentioned - you
have just fixed a failing test, and you have to got back and write more of
the test again.</p>

<p>Which means, that once you changed your production code only slightly in
direction of the correct implementation, you have to go back and write more
tests.</p>

<p>This is interesting. Now you got yourself in a very tight lock. In a very
tight feedback loop. Write a line of test, write a line of code, write a
line of test, write a line of code, and so on. The length of this loop is
probably 5, 10, 30 seconds. If you have a test suite that needs half an hour
to run, you will not do TDD.</p></li>
</ol>


<p>What happens if you do not follow this discipline to the letter? If you slip
there and there?: write a bit more production code, than you had to?, write a
bit more of a test, than you had to?, or even wrote a test after writing the
whole class under test?</p>

<p>Well, you have just lost the main benefit of TDD: you can no longer trust the
test suite. For sure, there will be some untested code if you do it this way.</p>

<p>Why do we need 100% test coverage, you ask? 70% sounds like an awesome
achievement! Or is it?..</p>

<p>What can you tell from the fact, that only 70% of your code is covered by test
suite? Only that 30% is not covered, and therefore, there is no quick and easy
way to verify that it works.</p>

<p>Lets imagine the following scenario:</p>

<ul>
<li>You open a file on your screen.</li>
<li>You spot some nasty duplication, and you know you want to fix it.</li>
<li>You even see an obvious way to fix it.</li>
<li>You touch your keyboard.</li>
<li>And now, the fear overwhelms you: this class is not tested.</li>
<li>And your reaction? - I won&rsquo;t touch it!</li>
</ul>


<p>That is where code starts to rot, while nobody cleans it up, because test suite
can not be trusted, and the whole codebase slowly down-slides to a big pile of
mess.</p>

<p>Now, lets imagine, that you have 100% code coverage (Well, maybe 98%, because
100% is the goal, that is not achievable). And the same scenario:</p>

<ul>
<li>You open a file on your screen.</li>
<li>You spot some nasty duplication.</li>
<li>You fix the duplication.</li>
<li>You run tests - and they are green.</li>
<li>You check-in cleaner code in your code control system.</li>
</ul>


<p>Or, lets say, that the problem is not trivial:
- You spot the long method.
- You split it in 3 methods - tests are still green.
- You proceed and extract these methods to the new class.
- And tests fail.
- Undo-Undo-Undo. And you are back to the green state.
- And now you think for a moment, what happened there.
- And you already have this ˝Gotcha!˝.
- And you successfully extract a class again - and the test suite is green.
- You check-in cleaner code in your code control system.</p>

<p>Undo button becomes your best friend. Once you stop knowing what is going on,
or what you are doing, or you simply confused, you can always go back to the
green state; that just happens to be 25 seconds ago (or 2-3 undo) away, because
of the tight feedback loop you got yourself into.</p>

<p>Now, there is a hidden rule of TDD. That feels more, like an implementation
detail of TDD:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:next</span></code></pre></td></tr></table></div></figure>


<p>As tests become more specific, production code should become more generic.</p>

<p>And it is very true, otherwise, you would end up adding a bunch of <code>if</code>
statements every time you add a failing test.</p>

<p>What that means, I will point out during the example.</p>

<p>And lets sum up now:</p>

<p>100% Code Coverage =>
  Lack of Fear =>
  Consistent Random Kindness to the Code =>
  Clean Code.</p>

<hr />

<p>60% Code Coverage =>
  Fear to Break It =>
  ˝I won&rsquo;t touch it!˝ =>
  Mess.</p>

<p>Now we can finally move on to the example. Next time, on the next episode of
Test-Driven-Development Screencast! Have a good day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Do You Need to Be Careful With Loop Variable in Go]]></title>
    <link href="http://www.tddfellow.com/blog/2016/01/08/why-do-you-need-to-be-careful-with-loop-variable-in-go/"/>
    <updated>2016-01-08T02:28:45+01:00</updated>
    <id>http://www.tddfellow.com/blog/2016/01/08/why-do-you-need-to-be-careful-with-loop-variable-in-go</id>
    <content type="html"><![CDATA[<h2>Taking reference of loop variable</h2>

<p>Lets start off with simple code example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">message</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">inbox</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">outbox</span> <span class="o">&lt;-</span> <span class="nx">EnhancedMessage</span><span class="p">{</span>
</span><span class='line'>                <span class="c1">// .. more fields here ..</span>
</span><span class='line'>                <span class="nx">Original</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks quite legit. In practice it will often cause race conditions. Because
<code>message</code> variable is defined once and then mutated in each loop iteration. And
we are giving pointer to this variable away to some concurrent collaborator.
This causes race condition and very confusing bugs.</p>

<p>Above code can be re-written as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// local scope begins here</span>
</span><span class='line'>        <span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>                <span class="nx">message</span> <span class="nx">Message</span>
</span><span class='line'>                <span class="nx">ok</span> <span class="kt">bool</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">message</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">inbox</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">break</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">outbox</span> <span class="o">&lt;-</span> <span class="nx">EnhancedMessage</span><span class="p">{</span>
</span><span class='line'>                        <span class="c1">// .. more fields here ..</span>
</span><span class='line'>                        <span class="nx">Original</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="c1">// local scope ends here</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at this code, it is quite obvious why it would have race conditions.</p>

<p>Correct way of doing that would be to either define a new variable manually
each iteration and copy <code>message</code>&rsquo;s value into it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">message</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">inbox</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">m</span> <span class="o">:=</span> <span class="nx">message</span>
</span><span class='line'>        <span class="nx">outbox</span> <span class="o">&lt;-</span> <span class="nx">EnhancedMessage</span><span class="p">{</span>
</span><span class='line'>                <span class="c1">// ...</span>
</span><span class='line'>                <span class="nx">Original</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">m</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way of doing that would be to take control of how loop variable works
yourself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">message</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">inbox</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">outbox</span> <span class="o">&lt;-</span> <span class="nx">EnhancedMessage</span><span class="p">{</span>
</span><span class='line'>                <span class="c1">// ...</span>
</span><span class='line'>                <span class="nx">Original</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Taking into account, that until the <code>EnhancedMessage</code> is processed by
concurrent collaborator and garbage collected, variables, created during each
iteration, i.e.: <code>m</code> and <code>message</code> for both examples, will stay in memory.
Therefore it is possible to just use pass-by-value instead of
pass-by-reference to achieve the same result. It is simpler too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">message</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">inbox</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">outbox</span> <span class="o">&lt;-</span> <span class="nx">EnhancedMessage</span><span class="p">{</span>
</span><span class='line'>                <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Given the fact that `EnhancedMessage.Original` definition</span>
</span><span class='line'>                <span class="c1">// changed to be of value type `Message`</span>
</span><span class='line'>                <span class="nx">Original</span><span class="p">:</span> <span class="nx">message</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally, I prefer latter. If you know of any drawbacks of this approach
comparing to other 2, or if you know of entirely better way of doing that,
please let me know.</p>

<h2>Running goroutine, that uses loop variable</h2>

<p>Example code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">message</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">inbox</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// .. do something important with message ..</span>
</span><span class='line'>        <span class="p">}()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code might look legit too. You might think it will process whole inbox
concurrently, but most probably it will process only a couple of last elements
multiple times.</p>

<p>If you rewrite the loop in a similar fashion as in previous section, you would
notice that <code>message</code> would be mutated while these goroutines are still
processing it. This will cause confusing race conditions.</p>

<p>Correct way of doing that is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">message</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">inbox</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">message</span> <span class="nx">Message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// .. do something important with message ..</span>
</span><span class='line'>        <span class="p">}(</span><span class="nx">message</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, it is basically the same as copying the value to the new defined
variable at each iteration of the loop. It just looks nicer.</p>

<h2>Thanks!</h2>

<p>If you have any questions, suggestions or just want to chat about the topic,
you can ping me on twitter <a href="https://twitter.com/waterlink000">@waterlink000</a> or
drop a comment on <a href="https://news.ycombinator.com/item?id=10864593">hackernews</a>.</p>

<p>Especially, if you think I am wrong somewhere in this article, please tell me,
I will only be happy to learn and iterate over this article to improve it.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intention-revealing Code]]></title>
    <link href="http://www.tddfellow.com/blog/2015/09/08/intention-revealing-code/"/>
    <updated>2015-09-08T21:24:52+02:00</updated>
    <id>http://www.tddfellow.com/blog/2015/09/08/intention-revealing-code</id>
    <content type="html"><![CDATA[<p>Lets start off with very simple code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">toJSON</span><span class="p">(</span><span class="nx">post</span> <span class="nx">Post</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span>
</span><span class='line'>                <span class="s">`{&quot;post_title&quot;: &quot;%s&quot;, &quot;post_content&quot;: &quot;%s&quot;}`</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">post</span><span class="p">.</span><span class="nx">Title</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">post</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is very simple code and it is easy to understand what it is doing and what
it is doing wrong:</p>

<ul>
<li>It tries to marshal <code>post</code> struct to custom <code>JSON</code> representation.</li>
<li>It fails when there are special characters in these strings.</li>
<li>It does not use standard <code>MarshalJSON</code> interface.</li>
</ul>


<p>It can be fixed in a pretty simple way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">post</span> <span class="nx">Post</span><span class="p">)</span> <span class="nx">MarshalJSON</span><span class="p">()</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span><span class='line'>                <span class="s">&quot;post_title&quot;</span><span class="p">:</span>   <span class="nx">post</span><span class="p">.</span><span class="nx">Title</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;post_content&quot;</span><span class="p">:</span> <span class="nx">post</span><span class="p">.</span><span class="nx">Content</span><span class="p">,</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And at the usage site, you can now just use standard <code>encoding/json</code> package
capabilities:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">rawPost</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">post</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// do stuff with rawPost</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now you can notice that tests do not pass. And the place that failed is
totally unrelevant.  Long story short. Name of the original method was not
revealing any real intent: it was actually specific json representation for
usage with external API, but normal <code>json.Marshal</code> is used by this same
application for providing responses to its own HTTP clients.</p>

<p>Were the name a bit more intention-revealing, nobody would waste their time
on finding this out by trial and mistake:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// should probably even sit in different package</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">marshalToExternalAPIFormat</span><span class="p">(</span><span class="nx">post</span> <span class="nx">Post</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is only a tip of the iceberg of how non-intention-revealing code can
trip you over.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using contracts.ruby With RSpec. Part 2]]></title>
    <link href="http://www.tddfellow.com/blog/2015/08/31/using-contracts-dot-ruby-with-rspec-part-2/"/>
    <updated>2015-08-31T18:36:30+02:00</updated>
    <id>http://www.tddfellow.com/blog/2015/08/31/using-contracts-dot-ruby-with-rspec-part-2</id>
    <content type="html"><![CDATA[<p>Remember <a href="http://waterlink.github.io/blog/2015/04/09/using-contracts-dot-ruby-with-rspec/">Using contracts.ruby With RSpec</a> ?</p>

<p>RSpec mocks violate all <code>:class</code> contracts because <code>is_a?(ClassName)</code> returns
<code>false</code> for mock. That post describes 2 possible solutions:</p>

<ul>
<li>stub <code>:is_a?</code>: <code>allow(my_double).to receive(:is_a?).with(MyClass).and_return(true)</code>, or</li>
<li>use <code>contracts-rspec</code> gem, that patches <code>instance_double</code> RSpec helper.</li>
</ul>


<h2>Custom validators</h2>

<p>Since custom validators have finally landed here:
<a href="https://github.com/egonSchiele/contracts.ruby/pull/159">egonShiele/contracts.ruby#159</a>,
now you can just override <code>:class</code> validator to accept all RSpec mocks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Make contracts accept all RSpec doubles</span>
</span><span class='line'><span class="no">Contract</span><span class="o">.</span><span class="n">override_validator</span><span class="p">(</span><span class="ss">:class</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">contract</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span>
</span><span class='line'>    <span class="n">arg</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">RSpec</span><span class="o">::</span><span class="no">Mocks</span><span class="o">::</span><span class="no">Double</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="n">arg</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="n">contract</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, RSpec mocks will not violate all the <code>:class</code> contracts.</p>

<p>More information can be found here: <a href="https://github.com/egonSchiele/contracts.ruby/blob/v0.11.0/TUTORIAL.md#providing-your-own-custom-validators">Providing your own custom validators</a>.</p>

<p>Additionally this refactoring enabled valuable speed optimization for complex
contracts - validators for them will be evaluated only once and memoized.</p>

<h2>Links</h2>

<ul>
<li><a href="http://waterlink.github.io/blog/2015/04/09/using-contracts-dot-ruby-with-rspec/">Previous part</a></li>
<li>contracts.ruby: <a href="https://github.com/egonSchiele/contracts.ruby">https://github.com/egonSchiele/contracts.ruby</a></li>
<li>contracts.ruby chat: <a href="https://gitter.im/egonSchiele/contracts.ruby">https://gitter.im/egonSchiele/contracts.ruby</a></li>
<li>Mentioned PR: <a href="https://github.com/egonSchiele/contracts.ruby/pull/159">https://github.com/egonSchiele/contracts.ruby/pull/159</a></li>
<li><a href="http://waterlink.github.io/blog/2015/03/05/introduction-to-contracts-dot-ruby/">Introduction to contracts.ruby</a></li>
<li><a href="https://egonschiele.github.io/contracts.ruby/">Great contracts.ruby tutorial</a></li>
<li><a href="https://github.com/egonSchiele/contracts.ruby/pull/195">Full fledged documentation PR</a>: see here staging docs: <a href="https://relishapp.com/contracts-staging/contracts-ruby/docs">https://relishapp.com/contracts-staging/contracts-ruby/docs</a></li>
</ul>


<h2>Thanks!</h2>

<p>If you have any questions, suggestions or just want to chat about how
contracts.ruby is awesome, you can ping me on twitter
<a href="https://twitter.com/waterlink000">@waterlink000</a>. If you have any issues using
<a href="https://github.com/egonSchiele/contracts.ruby">contracts.ruby</a> you can create
issues on corresponding github project. Pull requests are welcome!</p>

<p>Comments on <a href="https://news.ycombinator.com/item?id=10147783">hackernews</a>.</p>

<p>Happy coding! <a href="https://twitter.com/waterlink000">@waterlink000 on twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Machine Guide (VirtualBox on Mac OS X)]]></title>
    <link href="http://www.tddfellow.com/blog/2015/08/31/docker-machine-guide-virtualbox-mac-os-x/"/>
    <updated>2015-08-31T10:21:06+02:00</updated>
    <id>http://www.tddfellow.com/blog/2015/08/31/docker-machine-guide-virtualbox-mac-os-x</id>
    <content type="html"><![CDATA[<p><em>(VirtualBox on Mac OS X)</em></p>

<p>This guide is a combination of official docs and usage experience.</p>

<h2>Installation</h2>

<p><em>Install virtualbox first
<a href="https://www.virtualbox.org/wiki/Downloads">virtualbox downloads</a>.</em></p>

<p>Look at this page: <a href="https://github.com/docker/machine/releases/">https://github.com/docker/machine/releases/</a> and pick latest
release. At the time of writing this is <code>v0.4.1</code>.</p>

<p>Now, assign version number to an environment variable, together with your
architecture:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DOCKER_MACHINE_VERSION</span><span class="o">=</span>v0.4.1
</span><span class='line'><span class="nv">DOCKER_MACHINE_ARCH</span><span class="o">=</span>darwin-amd64
</span></code></pre></td></tr></table></div></figure>


<p>Now download <code>docker-machine</code> binary and put it onto your <code>PATH</code> (recommended
is <code>~/bin/</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p ~/bin
</span><span class='line'><span class="nv">URL</span><span class="o">=</span>https://github.com/docker/machine/releases/download/<span class="k">${</span><span class="nv">DOCKER_MACHINE_VERSION</span><span class="k">}</span>/docker-machine_<span class="k">${</span><span class="nv">DOCKER_MACHINE_ARCH</span><span class="k">}</span>
</span><span class='line'><span class="nv">OUTPUT</span><span class="o">=</span>~/bin/docker-machine
</span><span class='line'>curl -L <span class="k">${</span><span class="nv">URL</span><span class="k">}</span> &gt; <span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span>
</span><span class='line'>chmod +x <span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you still haven&rsquo;t yet, put <code>~/bin/</code> on your <code>PATH</code> with <code>export
PATH=$PATH:$HOME/bin</code> into your <code>.bashrc</code> or <code>.zshrc</code> (or whatever shell you
use).</p>

<h2>Installing docker client</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">URL</span><span class="o">=</span>https://get.docker.com/builds/Darwin/x86_64/docker-latest
</span><span class='line'><span class="nv">OUTPUT</span><span class="o">=</span>~/bin/docker
</span><span class='line'>curl -L <span class="k">${</span><span class="nv">URL</span><span class="k">}</span> &gt; <span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span>
</span><span class='line'>chmod +x <span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating your first docker machine</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine create -d virtualbox dev
</span></code></pre></td></tr></table></div></figure>


<p>This is how you create docker machine with name <code>dev</code> having virtualbox as a
backend.</p>

<p>But after some time you will encounter a problem of running out of memory. So
my recommended command to create your primary development docker machine is
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine create -d virtualbox dev --virtualbox-memory <span class="s2">&quot;5120&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create virtualbox VM with enough memory to run low-to-moderate size
clusters with <code>docker-compose</code>. Which should be enough for development.</p>

<p>This should be your primary docker machine that is always activated and used.
There is no need to destroy and re-create this <code>dev</code> machine unless you are
testing some edge-cases. And better to use additional docker machine with
different name for this.</p>

<h2>Connecting to your <code>dev</code> docker machine</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">eval</span> <span class="k">$(</span>docker-machine env dev<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this command, you will have everything you need to run <code>docker</code> in the same terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Using alpine image here because it is only ~5 MB</span>
</span><span class='line'>docker run -it --rm alpine <span class="nb">echo</span> <span class="s1">&#39;hello world&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># .. pulling alpine image here .. and:</span>
</span><span class='line'>hello world
</span></code></pre></td></tr></table></div></figure>


<p>It might be annoying to run <code>eval $(docker-machine env dev)</code> each time you open
new terminal. So feel free to put this line into your <code>.bashrc</code> or <code>.zshrc</code> or
whatever shell you use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># in .bashrc:</span>
</span><span class='line'><span class="nb">eval</span> <span class="k">$(</span>docker-machine env dev<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have just powered on your Mac (or just stopped your docker machine) you
will experience this error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Error: Host does not exist: dev
</span></code></pre></td></tr></table></div></figure>


<p>In that case just start it with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine start dev
</span></code></pre></td></tr></table></div></figure>


<p>And re-open your terminal.</p>

<h2>Dealing with docker machine&rsquo;s IP address</h2>

<p>Fact: docker machine&rsquo;s IP address stays the same, usually 192.168.99.100,
unless:</p>

<ul>
<li>you destroy your docker machine <code>dev</code>, create another VirtualBox VM and
create docker machine <code>dev</code> afterwards, or</li>
<li>you have custom VirtualBox configuration.</li>
</ul>


<p>Given that docker machine&rsquo;s IP address stays the same or changes very rarely,
you can simply put its IP address in your <code>/etc/hosts</code>.</p>

<p>First, figure out current docker machine&rsquo;s IP address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine ip dev
</span></code></pre></td></tr></table></div></figure>


<p>And put it in <code>/etc/hosts</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># in /etc/hosts</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Put IP address previous command has returned here:</span>
</span><span class='line'>192.168.99.100 docker-dev
</span></code></pre></td></tr></table></div></figure>


<p>To test that it works correclty try to run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it --rm -p 80:80 nginx
</span></code></pre></td></tr></table></div></figure>


<p>And now reach <code>http://docker-dev</code> in your browser - you should see default
Nginx page.</p>

<p>If you want to refer docker machine <code>dev</code> in your scripts, it is better to use
<code>$(docker-machine ip dev)</code> capabilities for that. For example, <code>curl</code>-ing the
page we have seen in browser just now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl <span class="k">$(</span>docker-machine ip dev<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For teams it would make sense to agree on the same name for primary development
docker machine. <code>dev</code> works just great!</p>

<p><em>NOTE: personally, I use both <code>docker-dev</code> and just <code>dev</code> as a hostname to type
less, but that might clash with something else, so <code>docker-dev</code> it is.</em></p>

<h2>Upgrading</h2>

<p>To upgrade <code>docker-machine</code> or <code>docker</code> binaries, just follow <code>Installation</code>
instructions again.</p>

<p>To upgrade <code>docker</code> server inside of already running docker machine, use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine upgrade dev
</span></code></pre></td></tr></table></div></figure>


<p>This will update to the latest version of <code>docker</code> server and <code>boot2docker</code>
image.</p>

<h2>Re-creating a fresh <code>dev</code> docker machine</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine rm dev
</span><span class='line'>docker-machine create -d virtualbox dev --virtualbox-memory <span class="s2">&quot;5120&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Further reading</h2>

<ul>
<li><a href="https://docs.docker.com/machine/">Overview of Docker Machine</a></li>
<li><a href="https://docs.docker.com/machine/get-started/">Get started with Docker Machine and a local VM</a></li>
</ul>


<p>Comments on <a href="https://news.ycombinator.com/item?id=10146082">hackernews</a>.</p>

<p>Happy hacking! <a href="https://twitter.com/waterlink000">@waterlink000 on twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Kitchen-docker Tests With Upstart]]></title>
    <link href="http://www.tddfellow.com/blog/2015/08/05/running-kitchen-docker-tests-with-upstart/"/>
    <updated>2015-08-05T19:10:36+02:00</updated>
    <id>http://www.tddfellow.com/blog/2015/08/05/running-kitchen-docker-tests-with-upstart</id>
    <content type="html"><![CDATA[<p>TL;DR:</p>

<figure class='code'><figcaption><span>.kitchen.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># .kitchen.yml</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker</span>
</span><span class='line'>  <span class="l-Scalar-Plain">use_sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>              <span class="c1"># this depends if you need to do `sudo` to run `docker` command or not</span>
</span><span class='line'>  <span class="l-Scalar-Plain">disable_upstart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ubuntu-upstart:14.04</span>
</span><span class='line'>  <span class="l-Scalar-Plain">run_command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/sbin/init</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">platforms</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ubuntu-14.04</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is possible because there is this official base image specifically for upstart: <a href="https://registry.hub.docker.com/_/ubuntu-upstart/.">https://registry.hub.docker.com/_/ubuntu-upstart/.</a></p>

<p>After making your <code>.kitchen.yml</code> look like this, just use <code>kitchen</code> as you would normally would.</p>

<p>Happy coding! <a href="https://twitter.com/waterlink000">@waterlink000 on twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using contracts.ruby With RSpec]]></title>
    <link href="http://www.tddfellow.com/blog/2015/04/09/using-contracts-dot-ruby-with-rspec/"/>
    <updated>2015-04-09T21:51:53+02:00</updated>
    <id>http://www.tddfellow.com/blog/2015/04/09/using-contracts-dot-ruby-with-rspec</id>
    <content type="html"><![CDATA[<h2>Issues with RSpec mocks</h2>

<p>Lets start from example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Example</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Contracts</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Contract</span> <span class="no">Something</span> <span class="o">=&gt;</span> <span class="no">Any</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_something</span><span class="p">(</span><span class="n">something</span><span class="p">)</span>
</span><span class='line'>    <span class="n">something</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And its corresponding spec:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;rspec&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">Example</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:example</span><span class="p">)</span> <span class="p">{</span> <span class="no">Example</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:something</span><span class="p">)</span> <span class="p">{</span> <span class="n">instance_double</span><span class="p">(</span><span class="no">Something</span><span class="p">,</span> <span class="ss">call</span><span class="p">:</span> <span class="ss">:hello</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;works&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">example</span><span class="o">.</span><span class="n">do_something</span><span class="p">(</span><span class="n">something</span><span class="p">))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="ss">:hello</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward unit test for <code>Example#do_something</code>. But if you run <code>rspec</code> you will get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ContractError</span><span class="p">:</span> <span class="no">Contract</span> <span class="n">violation</span> <span class="k">for</span> <span class="n">argument</span> <span class="mi">1</span> <span class="n">of</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">Expected</span><span class="p">:</span> <span class="no">Something</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">Actual</span><span class="p">:</span> <span class="c1">#&lt;RSpec::Mocks::InstanceVerifyingDouble:0xa401a0 @name=&quot;Something (instance)&quot;&gt;</span>
</span><span class='line'>    <span class="no">Value</span> <span class="n">guarded</span> <span class="k">in</span><span class="p">:</span> <span class="no">Example</span><span class="o">::</span><span class="n">do_something</span>
</span><span class='line'>    <span class="no">With</span> <span class="ss">Contract</span><span class="p">:</span> <span class="no">Something</span> <span class="o">=&gt;</span> <span class="no">Any</span>
</span></code></pre></td></tr></table></div></figure>


<p>It happens because class contracts use <code>#is_a?</code> to determine if contract matches or not. Simply: <code>something.is_a?(Something)</code> is required to be <code>true</code>.</p>

<p>But if we try to do it with <code>instance_double</code>, that is what we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;rspec/mocks/standalone&quot;</span>
</span><span class='line'><span class="n">something</span> <span class="o">=</span> <span class="n">instance_double</span><span class="p">(</span><span class="no">Something</span><span class="p">)</span>
</span><span class='line'><span class="n">something</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Something</span><span class="p">)</span>                              <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="n">something</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">RSpec</span><span class="o">::</span><span class="no">Mocks</span><span class="o">::</span><span class="no">InstanceVerifyingDouble</span><span class="p">)</span>  <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Solution to problem</h2>

<p>Pretty straightforward one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span><span class="p">(</span><span class="ss">:something</span><span class="p">)</span> <span class="p">{</span> <span class="n">instance_double</span><span class="p">(</span><span class="no">Something</span><span class="p">,</span> <span class="ss">call</span><span class="p">:</span> <span class="ss">:hello</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">allow</span><span class="p">(</span><span class="n">something</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:is_a?</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="no">Something</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this can be boring to type it each time you need an <code>instance_double</code> while working with <code>contracts</code>. So here you go:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;contracts-rspec&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>bundle</code> to install <code>contracts-rspec</code> gem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># your spec file</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;contracts/rspec&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">Example</span> <span class="k">do</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">RSpec</span><span class="o">::</span><span class="no">Mocks</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># .. write code as in first example ..</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you are covered. Inclusion of <code>Contracts::RSpec::Mocks</code> slightly alters behavior of <code>instance_double</code>. Now it automatically stubs out <code>#is_a?(Klass)</code> to return <code>true</code> on the class it was created from. In our case <code>Something</code>. This happens here: <a href="https://github.com/waterlink/contracts-rspec/blob/master/lib/contracts/rspec/mocks.rb#L4-L8">https://github.com/waterlink/contracts-rspec/blob/master/lib/contracts/rspec/mocks.rb#L4-L8</a></p>

<p>You can include it only in contexts you need, or you can do it globally from <code>spec_helper</code> like you do usually include spec helpers.</p>

<h2>Links</h2>

<ul>
<li>Gem: <a href="https://github.com/waterlink/contracts-rspec">https://github.com/waterlink/contracts-rspec</a></li>
<li>contracts.ruby: <a href="https://github.com/egonSchiele/contracts.ruby">https://github.com/egonSchiele/contracts.ruby</a></li>
<li>contracts.ruby chat: <a href="https://gitter.im/egonSchiele/contracts.ruby">https://gitter.im/egonSchiele/contracts.ruby</a></li>
<li>Born from here: <a href="https://github.com/egonSchiele/contracts.ruby/issues/14">egonSchiele/contracts.ruby#14</a></li>
<li><a href="http://waterlink.github.io/blog/2015/03/05/introduction-to-contracts-dot-ruby/">Introduction to contracts.ruby</a></li>
<li><a href="https://egonschiele.github.io/contracts.ruby/">Great contracts.ruby tutorial</a></li>
</ul>


<h2>Thanks!</h2>

<p>If you have any questions, suggestions or just want to chat about how contracts.ruby is awesome, you can ping me on twitter <a href="https://twitter.com/waterlink000">@waterlink000</a>. If you have any issues using <a href="https://github.com/egonSchiele/contracts.ruby">contracts.ruby</a> or <a href="https://github.com/waterlink/contracts-rspec">contracts-rspec</a> you can create issues on corresponding github project. Pull requests are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Design. Important Things]]></title>
    <link href="http://www.tddfellow.com/blog/2015/03/12/object-oriented-design-important-things/"/>
    <updated>2015-03-12T23:23:45+01:00</updated>
    <id>http://www.tddfellow.com/blog/2015/03/12/object-oriented-design-important-things</id>
    <content type="html"><![CDATA[<h2>Slides from my talk <a href="https://twitter.com/BrainlyGroup">@brainly</a> 12 Mar 2015</h2>

<p><em>Disclaimer: This is my personal vision, based on my knowledge and experience. If you want to challenge it, ask questions, provide feedback and discuss, feel free to ping me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>, I would love to hear from you.</em></p>

<p>Code examples are in ruby/pseudo-code.</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/45775223" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>


<h2>Object Oriented Programming</h2>

<p>Most notable features of OOP:</p>

<ul>
<li>Encapsulation - keep data together with behavior that needs that data, effectively hiding this data from everything else.</li>
<li>Inheritance - usually a subclassing, inheriting all behavior and data, in some language even all private details.</li>
<li>Polymorphism - ability to substitute instances of one class with instances of others.</li>
</ul>


<h3>How important these features are for OO design?</h3>

<p>Imagine, that given 100 points you want to distribute them between these 3 features, and each number will represent an importance of corresponding feature.</p>

<p>This would be my answer (and my personal opinion):</p>

<table>
<thead>
<tr>
<th style="text-align:center;">Encapsulation</th>
<th style="text-align:center;">Polymorphism</th>
<th style="text-align:center;">Inheritance</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">80</td>
<td style="text-align:center;">40</td>
<td style="text-align:center;">-20</td>
</tr>
</tbody>
</table>


<p>And 100 = 80 + 40 + (-20) :)</p>

<h3>Why inheritance is so bad?</h3>

<p>Because it increases coupling (usually): subclass (usually) depends on some data and/or behavior of its superclass. Even worse: (usually) it is not public data/behavior. I.e.: it violates principle of encapsulation badly. (Usually).</p>

<p>There are actually cases, when you do want your classes to be in inheritance hierarchy, it is the case, when your domain has the same hierarchy naturally in real world. And type inheritance doesn&rsquo;t really mean behavior inheritance.</p>

<h3>So how to avoid violation of encapsulation using inheritance?</h3>

<ul>
<li>Be careful, use only public interfaces of your superclass.</li>
<li>Replace inheritance with composition and delegation, because when you use only public interfaces of superclass, then you don&rsquo;t really need inheritance.</li>
</ul>


<h2>Coupling</h2>

<h3>Why coupling is bad?</h3>

<p>Imagine you need to change behavior of class X.</p>

<p>You will have to change any other piece of code base, that directly depends on this behavior of class X.</p>

<p>More coupling you have, more changes will have to take place, and probably, in totally unrelated parts of codebase.</p>

<p>As a result it:</p>

<ul>
<li>Exponentially increases time required for change</li>
<li>Invites bugs (lots of)</li>
</ul>


<h3>Dependency</h3>

<p>Dependency, is basically what coupling is, - is not really your friend, so you need to watch out for them.</p>

<h3>How to deal with dependencies?</h3>

<ul>
<li>Dependency inversion principle - Instead of referring foreign system/package/class/module/whatever, refer an abstract interface.</li>
<li>Dependency injection - Technique, that allows to provision all dependencies to parts of your system and basically fulfill all required interfaces.</li>
</ul>


<h3>An example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Answer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rating</span>
</span><span class='line'>    <span class="no">RatingService</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">rating_for</span><span class="p">(</span><span class="n">comments</span><span class="p">,</span> <span class="n">upvotes</span><span class="p">,</span> <span class="n">downvotes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is the problem with this code? - It is a dependency <code>Answer -&gt; RatingService</code>. What if you wanted to A/B test different rating models? You will definitely have troubles with that approach, especially if it is not the only place, that reference <code>RatingService</code>.</p>

<h3>Use dependency injection!</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Answer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">rating_service</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@rating_service</span> <span class="o">=</span> <span class="n">rating_service</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rating</span>
</span><span class='line'>    <span class="vi">@rating_service</span><span class="o">.</span><span class="n">rating_for</span><span class="p">(</span><span class="n">comments</span><span class="p">,</span> <span class="n">upvotes</span><span class="p">,</span> <span class="n">downvotes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can easily have multiple rating services and A/B test them, or do whatever you want, it is really flexible.</p>

<h3>It is still coupling</h3>

<p>But coupling to abstract interface, instead of real implementation, which means, you can exchange different implementations without changing users of this interface. Which basically improves polymorphism features of your code. It is very loose coupling.</p>

<h2>Test Driven Development</h2>

<h3>How is it related to OO design?</h3>

<p>It provides very short feedback on your OO design:</p>

<ul>
<li>If you have troubles writing test - your design is wrong and you need to step back</li>
<li>If you don&rsquo;t like how your test look like - your design is wrong and you need to step back</li>
<li>If you have troubles making test green - your design is wrong and you need to step back</li>
</ul>


<p>It is really almost like pairing partner if used right! Of course pairing still provides even better feedback loop - real-time continuous feedback loop!</p>

<h3>Unit tests vs integration tests</h3>

<p>Integration tests are scam!:</p>

<ul>
<li>Very slow => bad feedback loop</li>
<li>Exponential count of paths to test</li>
</ul>


<h3>Unit tests just don&rsquo;t work. Are they?</h3>

<p>Everything works in isolation != the whole system works as expected.</p>

<p>Testing in isolation = providing fake objects and/or mocks for all your dependencies</p>

<p>Mocks and fake objects can make your unit test green, but in fact the code is broken, because one of the dependencies has changed its behavior or even public interface in unexpected fashion.</p>

<h3>Answer: Cut your system at value boundaries!</h3>

<p>Instead of method call boundaries. And we arrive at Actor Model.</p>

<h2>Actor Model</h2>

<p>Given this example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RatingService</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rating_for</span><span class="p">(</span><span class="n">comments</span><span class="p">,</span> <span class="n">upvotes</span><span class="p">,</span> <span class="n">downvotes</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># .. calculate rating somehow ..</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problems with this class:</p>

<ul>
<li>Any user of this class will have to stub out its <code>#rating_for</code> in unit tests.</li>
<li>It invites additional behavior to be added (since it is as simple as adding additional public method), which will kill single responsibility feature of this class.</li>
</ul>


<h3>Actor Model solves this</h3>

<p>Warning, it is ruby pseudo-code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">actor</span> <span class="no">RatingService</span>
</span><span class='line'>  <span class="n">comments</span><span class="p">,</span> <span class="n">upvotes</span><span class="p">,</span> <span class="n">downvotes</span><span class="p">,</span> <span class="n">outbox</span> <span class="o">=</span> <span class="n">inbox</span><span class="o">.</span><span class="n">fetch</span>
</span><span class='line'>  <span class="c1"># .. calculate rating somehow ..</span>
</span><span class='line'>  <span class="n">outbox</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">rating</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">rating_service</span> <span class="o">=</span> <span class="no">RatingService</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">rating_service</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Way better now:</h3>

<ul>
<li>Allows unit testing easily without mocks and fake objects: by peeking inside its inbox in unit tests instead, and checking that it received right message.</li>
<li>It is really hard to pack more responsibility to this, since it has no methods, it has just one body, that is responsible for processing exactly one message.</li>
</ul>


<p><em>You of course can encode something strange in message, and organize your own method dispatch mechanism through actors inbox, but that is just silly (usually).</em></p>

<h3>Easy to unit test:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># creating actor, but not starting it</span>
</span><span class='line'><span class="n">rating_actor</span> <span class="o">=</span> <span class="no">RatingCalculator</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># dependency injection of rating actor</span>
</span><span class='line'><span class="n">answer_actor</span> <span class="o">=</span> <span class="no">Answer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">answer_id</span><span class="p">,</span> <span class="n">rating_actor</span><span class="p">)</span>
</span><span class='line'><span class="n">answer_actor</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="n">render_actor</span> <span class="o">=</span> <span class="no">Render</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">answer_actor</span><span class="p">)</span>
</span><span class='line'><span class="n">render_actor</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">rating_actor</span><span class="o">.</span><span class="n">inbox</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="o">[</span><span class="n">comments</span><span class="p">,</span> <span class="n">upvotes</span><span class="p">,</span> <span class="n">downvotes</span><span class="p">,</span> <span class="n">outbox</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># fake response from rating actor</span>
</span><span class='line'><span class="n">outbox</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">render_actor</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_rating</span><span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In unit tests you start only one actor - actor under test, and all other actors just get instantiated correctly and passed in as a dependencies where needed. Since they are not started, they will not consume any messages from their inbox, which means that you can consume these inboxes from your unit test, and check that the messages that arrived at inboxes are expected.</p>

<h2>When the code is done</h2>

<ul>
<li>It works!</li>
<li>It is readable (future me will not curse me for writing this code)</li>
<li>It has no duplication</li>
<li>And it is as short as possible (while maintaining all of the above)</li>
</ul>


<h3>Code comments</h3>

<p>Basically a code smell (I&rsquo;m not talking about documentation comments)</p>

<p>Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># when user is active</span>
</span><span class='line'><span class="k">if</span> <span class="n">activity_service</span><span class="o">.</span><span class="n">has_events</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">min_date</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="n">weeks</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">user</span><span class="o">.</span><span class="n">fraud?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is bad from more than one point of view, it literally should have been:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">active?</span>
</span><span class='line'><span class="c1"># or</span>
</span><span class='line'><span class="k">if</span> <span class="n">activity_service</span><span class="o">.</span><span class="n">user_is_active?</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'><span class="c1"># .. more variations can be here ..</span>
</span><span class='line'><span class="c1"># .. but all of them will be better ..</span>
</span></code></pre></td></tr></table></div></figure>


<h3>If code needs comment:</h3>

<ul>
<li>it is not readable</li>
<li>it fails to communicate its intent</li>
</ul>


<p>You should be able to read the code and understand it. In that order: read -> understand.</p>

<p>You shouldn&rsquo;t interpret it in your head. You shouldn&rsquo;t have Ruby (or your favorite language here) instance running in your head.</p>

<h2>To sum it up</h2>

<ul>
<li>Inheritance is good only in very rare cases</li>
<li>Coupling and dependencies are not your friends, take them under control with dependency inversion &amp; injection</li>
<li>TDD as a shortest feedback cycle for your OO design</li>
<li>Write code in such way, that you would thank yourself for that in the future</li>
</ul>


<p>Recommended reading: &ldquo;Pragmatic Programmer: From Journeyman to Master&rdquo; by Andrew Hunt and David Thomas. It is insanely good, concise book with lots of awesome references to other resources.</p>

<h2>Thanks!</h2>

<p>If you have any questions or suggestions, you can always reach me out on twitter <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Can contracts.ruby Be Used in the Community With Duck Typing Culture?]]></title>
    <link href="http://www.tddfellow.com/blog/2015/03/10/how-can-contracts-dot-ruby-be-used-in-the-community-with-duck-typing-culture/"/>
    <updated>2015-03-10T11:11:23+01:00</updated>
    <id>http://www.tddfellow.com/blog/2015/03/10/how-can-contracts-dot-ruby-be-used-in-the-community-with-duck-typing-culture</id>
    <content type="html"><![CDATA[<p>So, given simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One can ask: &ldquo;But it is ruby, what about duck typing, I want just pass two things that have certain methods defined on them&rdquo;</p>

<p>And my answer, you can easily do that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Contract</span> <span class="no">RespondTo</span><span class="o">[</span><span class="ss">:save</span><span class="p">,</span> <span class="ss">:has_valid?</span><span class="o">]</span><span class="p">,</span> <span class="no">RespondTo</span><span class="o">[</span><span class="ss">:to_s</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="no">Any</span>
</span><span class='line'><span class="k">def</span> <span class="nf">assign_user_a_default_email</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">default_email</span><span class="p">)</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">default_email</span> <span class="k">unless</span> <span class="n">user</span><span class="o">.</span><span class="n">has_valid?</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a built-in <code>RespondTo</code> contract. You can get a list of all of them here: <a href="http://egonschiele.github.io/contracts.ruby/#built-in-contracts">http://egonschiele.github.io/contracts.ruby/#built-in-contracts</a></p>

<p>If you have any questions, you can always ping me at twitter <a href="https://twitter.com/waterlink000">@waterlink000</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to contracts.ruby]]></title>
    <link href="http://www.tddfellow.com/blog/2015/03/05/introduction-to-contracts-dot-ruby/"/>
    <updated>2015-03-05T23:55:40+01:00</updated>
    <id>http://www.tddfellow.com/blog/2015/03/05/introduction-to-contracts-dot-ruby</id>
    <content type="html"><![CDATA[<h2>Slides from my talk on RUG-B Mar 2015</h2>

<p>A short introduction to a powerful Design by Contract technique and its implementation in ruby contracts.ruby.</p>

<p>Design by Contract allows one to do defensive programming in very elegant fashion, allows to set contracts on methods (expectations on input - arguments; and on output - return result) and invariants on classes. This allows to reason about code much much better.</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/45498085" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>


<h2>Classical defensive programming</h2>

<p>Lets start from simple code example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to be really confident in implementation and usage of this method, you would probably use something like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;a should be Fixnum or Float&quot;</span> <span class="k">unless</span> <span class="n">a</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Fixnum</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Float</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;b should be Fixnum or Float&quot;</span> <span class="k">unless</span> <span class="n">b</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Fixnum</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Float</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;result should be Fixnum or Float&quot;</span> <span class="k">unless</span> <span class="n">result</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Fixnum</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Float</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which definitely provides guarantees for input and output values.</p>

<p>But this code is extremely ugly, unmaintainable and unreadable. You can always extract <code>assert</code>-like helper methods, but it will not improve readability too much, you want to have just this simple <code>a + b</code> in the body of this method.</p>

<h2><code>gem "contracts"</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Contract</span> <span class="no">Num</span><span class="p">,</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code does the same thing, but readability at a totally different level. Developers who know haskell may find this notation quite familiar.</p>

<h2>Design by contract</h2>

<p>When applying design by contract technique to development of any system or service, it allows you to answer the following questions:</p>

<ul>
<li>What does it expect? - Restrictions on input data for the system.</li>
<li>What does it guarantee? - Restrictions on output data (return value) of the system.</li>
<li>What does it maintain? - Restrictions on the inner state of the system (if your system is stateful, of course).</li>
</ul>


<h2>Benefits</h2>

<p>Benefits of being able to answer this questions and enforce them on a runtime level are:</p>

<ul>
<li>Clients of your system can be confident using its public APIs. They can be sure, that if they provide something wrong, then they will get a convenient error immediately. And they can be sure, that system returns the right value as a result.</li>
<li>System or service itself can be confident in its own operations. Implementation of system, that is covered with contracts, can assume that all the data flowing through the system is right and expected, and don&rsquo;t waste time (and lines of code, and sanity of the developer/maintainer) on different checks, conversions and so on (ie on defensive programming), it can just do what it needs to do, in confident, concise and convenient way, right up to the point.</li>
</ul>


<h2><code>assert</code> on steroids. And it is not only about types</h2>

<p>Up until now it may seem like some kind of runtime type-checking system. But it is not, it is way more powerful.</p>

<p>You can check for exact value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Contract</span> <span class="mi">200</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">:get</span> <span class="o">=&gt;</span> <span class="s2">&quot;ok&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can check for types:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Contract</span> <span class="no">User</span><span class="p">,</span> <span class="no">Time</span> <span class="o">=&gt;</span> <span class="no">Or</span><span class="o">[</span><span class="no">TrueClass</span><span class="p">,</span> <span class="no">FalseClass</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can check for anything that is available to you at runtime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Contract</span> <span class="no">ActiveUser</span> <span class="o">=&gt;</span> <span class="no">Rating</span>
</span><span class='line'><span class="k">def</span> <span class="nf">rating_for</span><span class="p">(</span><span class="n">active_user</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># .. calculate rating for active user ..</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ActiveUser</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">valid?</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">last_activity</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="n">weeks</span><span class="o">.</span><span class="n">ago</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you expect when contract check on <code>active_user</code> argument happens, it will just call <code>ActiveUser.valid?(active_user)</code> and in case of falsy result will raise contract violation error.</p>

<h2>Very useful contract violation errors</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ContractError</span><span class="p">:</span> <span class="no">Contract</span> <span class="n">violation</span> <span class="k">for</span> <span class="n">argument</span> <span class="mi">1</span> <span class="n">of</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">Expected</span><span class="p">:</span> <span class="no">ActiveUser</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">Actual</span><span class="p">:</span> <span class="c1">#&lt;User:0x00000101059540&gt; {last_activity=27.11.2014}</span>
</span><span class='line'>    <span class="no">Value</span> <span class="n">guarded</span> <span class="k">in</span><span class="p">:</span> <span class="no">Object</span><span class="o">::</span><span class="n">rating_for</span>
</span><span class='line'>    <span class="no">With</span> <span class="ss">Contract</span><span class="p">:</span> <span class="no">ActiveUser</span> <span class="o">=&gt;</span> <span class="no">Rating</span>
</span><span class='line'>    <span class="ss">At</span><span class="p">:</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">10</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="n">backtrace</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This kind of errors tell you, what exactly you did wrong and where exactly you did it wrong. It is totally different from usual <code>NoMethodError :something for nil:NilClass</code>, because usually these kind of no-method errors can occur in totally different part of codebase comparing to where these errors actually were introduced. Contract violation will be issued exactly at the place where you passed invalid data into or out from your system. So that when you see a contract violation error, there is a high chance that you already know how to fix it.</p>

<h2>Pattern matching, sorta..</h2>

<p>You can say even method overloading. Very simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># factorial in classic way</span>
</span><span class='line'><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># factorial using pattern matching</span>
</span><span class='line'><span class="no">Contract</span> <span class="mi">1</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">_</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Contract</span> <span class="no">Num</span> <span class="o">=&gt;</span> <span class="no">Num</span>
</span><span class='line'><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="n">number</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I saw this example, my first reaction was: &ldquo;Wow!&rdquo;. I was very excited about this feature.</p>

<h2>Something useful with pattern matching</h2>

<p>Last example was not particularly useful for our everyday development, but here you go.</p>

<p>Imagine you have a concurrent evented system, that needs to make asynchronous requests to some external http service(s). You may eventually end up with handler functions like these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Classical way</span>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_response</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>    <span class="n">transform_response</span><span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">wrap_in_error</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># And using pattern matching:</span>
</span><span class='line'><span class="no">Contract</span> <span class="mi">200</span><span class="p">,</span> <span class="no">JsonString</span> <span class="o">=&gt;</span> <span class="no">JsonString</span>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_response</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>  <span class="n">transform_response</span><span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Contract</span> <span class="no">Fixnum</span><span class="p">,</span> <span class="nb">String</span> <span class="o">=&gt;</span> <span class="no">JsonString</span>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_response</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>  <span class="n">wrap_in_error</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Limitless benefits</h2>

<ul>
<li>All your input data is consistent</li>
<li>All data flows inside of your system are consistent</li>
<li>State of your system is consistent</li>
<li>Output of your system is consistent (or it is a contract violation error)</li>
<li>Blows up loudly on any logical error in your system</li>
</ul>


<p>Last point is extremely important, because sometimes logical errors in classical programs will not lead to any failure at all, they will just do the wrong thing. For example, transfer money to wrong bank account. In such mission critical systems it is really important to fail fast to not allow error to propagate throughout your system.</p>

<h2>Caveats: Performance</h2>

<table>
<thead>
<tr>
<th style="text-align:left;">Benchmark</th>
<th style="text-align:left;">Slowdown</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"><code>a+b</code></td>
<td style="text-align:left;">900% slowdown</td>
</tr>
<tr>
<td style="text-align:left;">production system with network IO</td>
<td style="text-align:left;">5-10% slowdown</td>
</tr>
<tr>
<td style="text-align:left;"><code>NO_CONTRACTS=1</code></td>
<td style="text-align:left;">0% slowdown</td>
</tr>
</tbody>
</table>


<p><p/></p>

<p>First benchmark is simple comparision of <code>a + b</code> with and without contract. Since <code>a + b</code> itself is very fast, then the slowdown is huge. But if you try to benchmark any real world system, that actually does something useful (communicates to other services through network for example), then slowdown is very very small.</p>

<p>And you have ability to disable contracts in production with <code>NO_CONTRACTS=1</code> environment variable. But beware, you lose extremely important benefit of blowing up on logical error immediately before letting error propagate. This benefit itself outweights these 5-10%, at least for me.</p>

<h2>Useful links</h2>

<ul>
<li><a href="https://github.com/egonSchiele/contracts.ruby">Github</a></li>
<li><a href="http://egonschiele.github.io/contracts.ruby">Nice tutorial</a></li>
<li><a href="https://github.com/egonSchiele">Creator</a></li>
<li><a href="https://github.com/waterlink">Me, co-maintainer</a></li>
</ul>


<p>If you have any questions or suggestions, you can always reach me out on twitter <a href="https://twitter.com/waterlink000">@waterlink000</a>. If you have any issues with using <code>contracts.ruby</code>, you can always create an <a href="https://github.com/egonSchiele/contracts.ruby/issues">issue on github</a> and Pull Requests are welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dismantling Effective Go Article]]></title>
    <link href="http://www.tddfellow.com/blog/2015/01/30/dismantling-effective-go-article/"/>
    <updated>2015-01-30T22:39:11+01:00</updated>
    <id>http://www.tddfellow.com/blog/2015/01/30/dismantling-effective-go-article</id>
    <content type="html"><![CDATA[<p>Go is a nice language and giving tips on how to better write code in that language right away at first language tutorials is awesome.</p>

<p>Article itself: <a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a></p>

<p>And here is a list of my thoughts.</p>

<h2>Formatting</h2>

<p>I generally like this approach, it is nice to have such feature in your language tools available right there and with already existing integrations to popular editors.</p>

<p>Except one thing:</p>

<blockquote><p>Parentheses</p>

<p>Go needs fewer parentheses than C and Java: control structures (if, for, switch) do not have parentheses in their syntax. Also, the operator precedence hierarchy is shorter and clearer, so</p>

<pre><code>x&lt;&lt;8 + y&lt;&lt;16
</code></pre></blockquote>

<p>So we kill parentheses and replace them with whitespace. I am not entirely sure it is better. How will this work then?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">x</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>And what about this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">x</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span>    <span class="o">+</span>    <span class="nx">y</span>  <span class="o">&lt;&lt;</span>  <span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>Probably nobody will write it like that, but one space miss, and lots of minutes lost in debugging.</p>

<h2>Semicolons</h2>

<p>Oh, lexer inserting semicolons where it pleases? What can go wrong. Reminds me about javascript and its problems when you omit semicolons.</p>

<p>And this example looked strange to me:</p>

<blockquote><p>One consequence of the semicolon insertion rules is that you cannot put the opening brace of a control structure (if, for, switch, or select) on the next line. If you do, a semicolon will be inserted before the brace, which <strong>could cause unwanted effects</strong>. Write them like this</p>

<pre><code> if i &lt; f() {
     g()
 }
</code></pre>

<p>not like this</p>

<pre><code> if i &lt; f()  // wrong!
 {           // wrong!
      g()
 }
</code></pre></blockquote>

<p>First I thought that it will accept this input, put a semicolon after if, compile successfully and always execute statement inside of block, especially because it said &ldquo;could cause unwanted effects&rdquo;. But turned out this code results in compilation error - so no problem here, but probably this should have been clarified in the article.</p>

<h2>Control Structure</h2>

<p>Mandatory block - looks good to me.</p>

<p>But the last example worries me:</p>

<blockquote><p>This is an example of a common situation where code must guard against a sequence of error conditions. The code reads well if the successful flow of control runs down the page, eliminating error cases as they arise. Since error cases tend to end in return statements, the resulting code needs no else statements.</p>

<pre><code>f, err := os.Open(name)
if err != nil {
     return err
}
d, err := f.Stat()
if err != nil {
     f.Close()
     return err
}
codeUsing(f, d)
</code></pre></blockquote>

<p>That code is definitely not narrative, I will put some comments with kind of operation that is done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>   <span class="c1">// get input</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>           <span class="c1">// check errors, guard</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">d</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Stat</span><span class="p">()</span>        <span class="c1">// get additional input</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>           <span class="c1">// check for errors, again, guard</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>             <span class="c1">// cleanups</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">codeUsing</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span>           <span class="c1">// do something</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way it is hard to understand and reason about.</p>

<p>Why not just:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">f</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>         <span class="c1">// get input</span>
</span><span class='line'><span class="nx">d</span> <span class="p">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Stat</span><span class="p">()</span>              <span class="c1">// get input</span>
</span><span class='line'><span class="nx">result</span> <span class="p">=</span> <span class="nx">codeUsing</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span>  <span class="c1">// do something</span>
</span><span class='line'><span class="k">if</span> <span class="nx">result</span><span class="p">.</span><span class="nx">IsErorr</span><span class="p">()</span> <span class="p">{</span>     <span class="c1">// handle errors</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>             <span class="c1">// cleanup</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course <code>f</code>, <code>d</code> and <code>result</code> are just <code>Result</code>/<code>Either</code> monads, they can be either in normal or faulty state. Whenever you try to do anything on <code>Result</code> in faulty state, it will just return itself. But <code>Result</code> in normal state will proxy call to its contents and wrap it in another <code>Result</code> monad (normal or faulty - depends on if call was successful or not). Probably I am too critical about that, because here I used some patterns that are not part of the language itself, but yeah, I can&rsquo;t look at code that mixes guards and actions.</p>

<p>Probably, somebody out there in go-lang world can tell me, is it common to use patterns like <code>Maybe</code>, <code>Result</code>, <code>NullObject</code> and so on in go-lang? Or everybody just go with simple code without any magic behind the scenes, and just do it like in the article&rsquo;s example? Feel free to ping me at twitter <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>

<h2>For</h2>

<p>Lets move on..</p>

<blockquote><p>For strings, the range does more work for you, breaking out individual Unicode code points by parsing the UTF-8. Erroneous encodings consume one byte and produce the replacement rune U+FFFD. (The name (with associated builtin type) rune is Go terminology for a single Unicode code point. See the language specification for details.)</p></blockquote>

<p>I really like that a term for this &ldquo;unicode minimal entity&rdquo; was invented. And after some while the name actually makes a lot of sense. And it sounds good.</p>

<h2>Switch</h2>

<p>That surprised me. Feels like assembler:</p>

<blockquote><p>Although they are not nearly as common in Go as some other C-like languages, break statements can be used to terminate a switch early. Sometimes, though, it&rsquo;s necessary to break out of a surrounding loop, not the switch, and in Go that can be accomplished by putting a label on the loop and &ldquo;breaking&rdquo; to that label. This example shows both uses.</p>

<pre><code>Loop:
    for n := 0; n &lt; len(src); n += size {
        switch {
            case src[n] &lt; sizeOne:
                if validateOnly {
                    break
                }
                size = 1
                update(src[n])

            case src[n] &lt; sizeTwo:
                if n+1 &gt;= len(src) {
                    err = errShortInput
                    break Loop
                }
                if validateOnly {
                    break
                }
                size = 2
                update(src[n] + src[n+1]&lt;&lt;shift)
            }
        }
</code></pre></blockquote>

<p>Not exactly the original assembler label, one only use it to mark (aka tag) the loop itself and use it to break out of it. Interesting concept, but something clicks in my head when I look at this.</p>

<h2>Type switch</h2>

<p>Good one, &ldquo;Switching on Type&rdquo;, (usually) a code smell, builtin into language. But still it has its own uses when used carefully.</p>

<h2>Multiple return values</h2>

<p>Why not tuples? If you just introduce tuples and destructuring, then you don&rsquo;t need multiple return values, only one return value - tuple itself.</p>

<h2>Defer</h2>

<p>This is a nice one. Allows to simplify previous example with files even more:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">f</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>         <span class="c1">// get input</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>           <span class="c1">// deferred cleanup right after acquiring of `f`</span>
</span><span class='line'><span class="nx">d</span> <span class="p">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Stat</span><span class="p">()</span>              <span class="c1">// get input</span>
</span><span class='line'><span class="nx">result</span> <span class="p">=</span> <span class="nx">codeUsing</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span>  <span class="c1">// do something</span>
</span></code></pre></td></tr></table></div></figure>


<p>Particularly interesting example with trace/untrace follows in the article.</p>

<hr />

<p>To be continued&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec Json Expectations - Set of Matchers and Helpers to Allow You Test Your API Responses Like a Pro]]></title>
    <link href="http://www.tddfellow.com/blog/2015/01/23/rspec-json-expectations-set-of-matchers-and-helpers-to-allow-you-test-your-api-responses-like-a-pro/"/>
    <updated>2015-01-23T01:56:19+01:00</updated>
    <id>http://www.tddfellow.com/blog/2015/01/23/rspec-json-expectations-set-of-matchers-and-helpers-to-allow-you-test-your-api-responses-like-a-pro</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/waterlink/rspec-json_expectations">rspec-json_expectations</a> library provides powerful <code>include_json</code> matcher for your RSpec suites. It allows to match string with JSON or already parsed ruby <code>Hash</code> against other ruby <code>Hash</code>, which is very convenient and creates very readable spec code. Lets jump to some examples.</p>

<p>It can handle some plain json:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;has basic info about user&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">include_json</span><span class="p">(</span>
</span><span class='line'>    <span class="nb">id</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;john.smith@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;John&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And nested json:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;has gamification info for user&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">include_json</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">code</span><span class="p">:</span> <span class="s2">&quot;7wxMw32&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">gamification</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">rating</span><span class="p">:</span> <span class="mi">93</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">score</span><span class="p">:</span> <span class="mi">355</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even do some regex matching:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;has basic info about user&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">include_json</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">code</span><span class="p">:</span> <span class="sr">/^[a-z0-9]{10}$/</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">url</span><span class="p">:</span> <span class="sr">%r{api/v5/users/[a-z0-9]{10}.json}</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most can agree, that this method of specifying JSON responses in ruby is very readable, but what about failure messages? How helpful they are?</p>

<p>For example with failure in nested JSON things can become tricky, but this gem solves them quite nice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>             json atom at path "gamification/score" is not equal to expected value:
</span><span class='line'>
</span><span class='line'>               expected: 355
</span><span class='line'>                    got: 397</span></code></pre></td></tr></table></div></figure>


<p>If you match with nested Arrays you will get numbers in your JSON path within failure message, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>             json atom at path "results/2/badges/0" is not equal to expected value:
</span><span class='line'>
</span><span class='line'>               expected: "first flight"
</span><span class='line'>                    got: "day & night"
</span><span class='line'>
</span><span class='line'>             json atom at path "results/3" is missing</span></code></pre></td></tr></table></div></figure>


<p>For further reading and instructions: <a href="https://github.com/waterlink/rspec-json_expectations">github</a> and <a href="http://www.relishapp.com/waterlink/rspec-json-expectations/docs/json-expectations">cucumber generated documentation</a>.</p>

<p>Feedback is highly appreciated, contact me on twitter (<a href="https://twitter.com/waterlink000">@waterlink000</a>) or on <a href="https://github.com/waterlink/rspec-json_expectations/issues">github issues</a>.</p>
]]></content>
  </entry>
  
</feed>
