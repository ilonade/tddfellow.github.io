<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | waterlink blog]]></title>
  <link href="http://waterlink.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://waterlink.github.io/"/>
  <updated>2015-08-31T11:29:59+02:00</updated>
  <id>http://waterlink.github.io/</id>
  <author>
    <name><![CDATA[Oleksii Fedorov (waterlink)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Kitchen-docker Tests With Upstart]]></title>
    <link href="http://waterlink.github.io/blog/2015/08/05/running-kitchen-docker-tests-with-upstart/"/>
    <updated>2015-08-05T19:10:36+02:00</updated>
    <id>http://waterlink.github.io/blog/2015/08/05/running-kitchen-docker-tests-with-upstart</id>
    <content type="html"><![CDATA[<p>TL;DR:</p>

<pre><code class="yml .kitchen.yml"># .kitchen.yml
---
driver:
  name: docker
  use_sudo: false              # this depends if you need to do `sudo` to run `docker` command or not
  disable_upstart: false
  image: ubuntu-upstart:14.04
  run_command: /sbin/init

platforms:
  - name: ubuntu-14.04
</code></pre>

<p>It is possible because there is this official base image specifically for upstart: <a href="https://registry.hub.docker.com/_/ubuntu-upstart/.">https://registry.hub.docker.com/_/ubuntu-upstart/.</a></p>

<p>After making your <code>.kitchen.yml</code> look like this, just use <code>kitchen</code> as you would normally would.</p>

<p>Happy coding! <a href="https://twitter.com/waterlink000">@waterlink000 on twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using contracts.ruby With RSpec]]></title>
    <link href="http://waterlink.github.io/blog/2015/04/09/using-contracts-dot-ruby-with-rspec/"/>
    <updated>2015-04-09T21:51:53+02:00</updated>
    <id>http://waterlink.github.io/blog/2015/04/09/using-contracts-dot-ruby-with-rspec</id>
    <content type="html"><![CDATA[<h2>Issues with RSpec mocks</h2>

<p>Lets start from example:</p>

<pre><code class="ruby">class Example
  include Contracts

  Contract Something =&gt; Any
  def do_something(something)
    something.call
  end
end
</code></pre>

<p>And its corresponding spec:</p>

<pre><code class="ruby">require "rspec"

RSpec.describe Example do
  let(:example) { Example.new }
  let(:something) { instance_double(Something, call: :hello) }

  it "works" do
    expect(example.do_something(something))
      .to eq(:hello)
  end
end
</code></pre>

<p>Pretty straightforward unit test for <code>Example#do_something</code>. But if you run <code>rspec</code> you will get:</p>

<pre><code>ContractError: Contract violation for argument 1 of 1:
    Expected: Something,
    Actual: #&lt;RSpec::Mocks::InstanceVerifyingDouble:0xa401a0 @name="Something (instance)"&gt;
    Value guarded in: Example::do_something
    With Contract: Something =&gt; Any
</code></pre>

<p>It happens because class contracts use <code>#is_a?</code> to determine if contract matches or not. Simply: <code>something.is_a?(Something)</code> is required to be <code>true</code>.</p>

<p>But if we try to do it with <code>instance_double</code>, that is what we get:</p>

<pre><code class="ruby">require "rspec/mocks/standalone"
something = instance_double(Something)
something.is_a?(Something)                              #=&gt; false
something.is_a?(RSpec::Mocks::InstanceVerifyingDouble)  #=&gt; true
</code></pre>

<h2>Solution to problem</h2>

<p>Pretty straightforward one:</p>

<pre><code class="ruby">let(:something) { instance_double(Something, call: :hello) }

before do
  allow(something)
    .to receive(:is_a?)
    .with(Something)
    .and_return(true)
end
</code></pre>

<p>But this can be boring to type it each time you need an <code>instance_double</code> while working with <code>contracts</code>. So here you go:</p>

<pre><code class="ruby"># Gemfile
group :test do
  gem "contracts-rspec"
end
</code></pre>

<p>Run <code>bundle</code> to install <code>contracts-rspec</code> gem.</p>

<pre><code class="ruby"># your spec file
require "contracts/rspec"

RSpec.describe Example do
  include Contracts::RSpec::Mocks

  # .. write code as in first example ..
end
</code></pre>

<p>Now you are covered. Inclusion of <code>Contracts::RSpec::Mocks</code> slightly alters behavior of <code>instance_double</code>. Now it automatically stubs out <code>#is_a?(Klass)</code> to return <code>true</code> on the class it was created from. In our case <code>Something</code>. This happens here: <a href="https://github.com/waterlink/contracts-rspec/blob/master/lib/contracts/rspec/mocks.rb#L4-L8">https://github.com/waterlink/contracts-rspec/blob/master/lib/contracts/rspec/mocks.rb#L4-L8</a></p>

<p>You can include it only in contexts you need, or you can do it globally from <code>spec_helper</code> like you do usually include spec helpers.</p>

<h2>Links</h2>

<ul>
<li>Gem: <a href="https://github.com/waterlink/contracts-rspec">https://github.com/waterlink/contracts-rspec</a></li>
<li>contracts.ruby: <a href="https://github.com/egonSchiele/contracts.ruby">https://github.com/egonSchiele/contracts.ruby</a></li>
<li>contracts.ruby chat: <a href="https://gitter.im/egonSchiele/contracts.ruby">https://gitter.im/egonSchiele/contracts.ruby</a></li>
<li>Born from here: <a href="https://github.com/egonSchiele/contracts.ruby/issues/14">egonSchiele/contracts.ruby#14</a></li>
<li><a href="http://waterlink.github.io/blog/2015/03/06/introduction-to-contracts-dot-ruby/">Introduction to contracts.ruby</a></li>
<li><a href="https://egonschiele.github.io/contracts.ruby/">Great contracts.ruby tutorial</a></li>
</ul>


<h2>Thanks!</h2>

<p>If you have any questions, suggestions or just want to chat about how contracts.ruby is awesome, you can ping me on twitter <a href="https://twitter.com/waterlink000">@waterlink000</a>. If you have any issues using <a href="https://github.com/egonSchiele/contracts.ruby">contracts.ruby</a> or <a href="https://github.com/waterlink/contracts-rspec">contracts-rspec</a> you can create issues on corresponding github project. Pull requests are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Design. Important Things]]></title>
    <link href="http://waterlink.github.io/blog/2015/03/12/object-oriented-design-important-things/"/>
    <updated>2015-03-12T23:23:45+01:00</updated>
    <id>http://waterlink.github.io/blog/2015/03/12/object-oriented-design-important-things</id>
    <content type="html"><![CDATA[<h2>Slides from my talk <a href="https://twitter.com/BrainlyGroup">@brainly</a> 12 Mar 2015</h2>

<p><em>Disclaimer: This is my personal vision, based on my knowledge and experience. If you want to challenge it, ask questions, provide feedback and discuss, feel free to ping me on twitter: <a href="https://twitter.com/waterlink000">@waterlink000</a>, I would love to hear from you.</em></p>

<p>Code examples are in ruby/pseudo-code.</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/45775223" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>


<h2>Object Oriented Programming</h2>

<p>Most notable features of OOP:</p>

<ul>
<li>Encapsulation - keep data together with behavior that needs that data, effectively hiding this data from everything else.</li>
<li>Inheritance - usually a subclassing, inheriting all behavior and data, in some language even all private details.</li>
<li>Polymorphism - ability to substitute instances of one class with instances of others.</li>
</ul>


<h3>How important these features are for OO design?</h3>

<p>Imagine, that given 100 points you want to distribute them between these 3 features, and each number will represent an importance of corresponding feature.</p>

<p>This would be my answer (and my personal opinion):</p>

<table>
<thead>
<tr>
<th style="text-align:center;">Encapsulation</th>
<th style="text-align:center;">Polymorphism</th>
<th style="text-align:center;">Inheritance</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">80</td>
<td style="text-align:center;">40</td>
<td style="text-align:center;">-20</td>
</tr>
</tbody>
</table>


<p>And 100 = 80 + 40 + (-20) :)</p>

<h3>Why inheritance is so bad?</h3>

<p>Because it increases coupling (usually): subclass (usually) depends on some data and/or behavior of its superclass. Even worse: (usually) it is not public data/behavior. I.e.: it violates principle of encapsulation badly. (Usually).</p>

<p>There are actually cases, when you do want your classes to be in inheritance hierarchy, it is the case, when your domain has the same hierarchy naturally in real world. And type inheritance doesn&rsquo;t really mean behavior inheritance.</p>

<h3>So how to avoid violation of encapsulation using inheritance?</h3>

<ul>
<li>Be careful, use only public interfaces of your superclass.</li>
<li>Replace inheritance with composition and delegation, because when you use only public interfaces of superclass, then you don&rsquo;t really need inheritance.</li>
</ul>


<h2>Coupling</h2>

<h3>Why coupling is bad?</h3>

<p>Imagine you need to change behavior of class X.</p>

<p>You will have to change any other piece of code base, that directly depends on this behavior of class X.</p>

<p>More coupling you have, more changes will have to take place, and probably, in totally unrelated parts of codebase.</p>

<p>As a result it:</p>

<ul>
<li>Exponentially increases time required for change</li>
<li>Invites bugs (lots of)</li>
</ul>


<h3>Dependency</h3>

<p>Dependency, is basically what coupling is, - is not really your friend, so you need to watch out for them.</p>

<h3>How to deal with dependencies?</h3>

<ul>
<li>Dependency inversion principle - Instead of referring foreign system/package/class/module/whatever, refer an abstract interface.</li>
<li>Dependency injection - Technique, that allows to provision all dependencies to parts of your system and basically fulfill all required interfaces.</li>
</ul>


<h3>An example</h3>

<pre><code class="ruby">class Answer
  def rating
    RatingService.new.rating_for(comments, upvotes, downvotes)
  end
end
</code></pre>

<p>What is the problem with this code? - It is a dependency <code>Answer -&gt; RatingService</code>. What if you wanted to A/B test different rating models? You will definitely have troubles with that approach, especially if it is not the only place, that reference <code>RatingService</code>.</p>

<h3>Use dependency injection!</h3>

<pre><code class="ruby">class Answer
  def initialize(rating_service)
    @rating_service = rating_service
  end

  def rating
    @rating_service.rating_for(comments, upvotes, downvotes)
  end
end
</code></pre>

<p>Now you can easily have multiple rating services and A/B test them, or do whatever you want, it is really flexible.</p>

<h3>It is still coupling</h3>

<p>But coupling to abstract interface, instead of real implementation, which means, you can exchange different implementations without changing users of this interface. Which basically improves polymorphism features of your code. It is very loose coupling.</p>

<h2>Test Driven Development</h2>

<h3>How is it related to OO design?</h3>

<p>It provides very short feedback on your OO design:</p>

<ul>
<li>If you have troubles writing test - your design is wrong and you need to step back</li>
<li>If you don&rsquo;t like how your test look like - your design is wrong and you need to step back</li>
<li>If you have troubles making test green - your design is wrong and you need to step back</li>
</ul>


<p>It is really almost like pairing partner if used right! Of course pairing still provides even better feedback loop - real-time continuous feedback loop!</p>

<h3>Unit tests vs integration tests</h3>

<p>Integration tests are scam!:</p>

<ul>
<li>Very slow => bad feedback loop</li>
<li>Exponential count of paths to test</li>
</ul>


<h3>Unit tests just don&rsquo;t work. Are they?</h3>

<p>Everything works in isolation != the whole system works as expected.</p>

<p>Testing in isolation = providing fake objects and/or mocks for all your dependencies</p>

<p>Mocks and fake objects can make your unit test green, but in fact the code is broken, because one of the dependencies has changed its behavior or even public interface in unexpected fashion.</p>

<h3>Answer: Cut your system at value boundaries!</h3>

<p>Instead of method call boundaries. And we arrive at Actor Model.</p>

<h2>Actor Model</h2>

<p>Given this example:</p>

<pre><code class="ruby">class RatingService
  def rating_for(comments, upvotes, downvotes)
    # .. calculate rating somehow ..
  end
end
</code></pre>

<p>Problems with this class:</p>

<ul>
<li>Any user of this class will have to stub out its <code>#rating_for</code> in unit tests.</li>
<li>It invites additional behavior to be added (since it is as simple as adding additional public method), which will kill single responsibility feature of this class.</li>
</ul>


<h3>Actor Model solves this</h3>

<p>Warning, it is ruby pseudo-code:</p>

<pre><code class="ruby">actor RatingService
  comments, upvotes, downvotes, outbox = inbox.fetch
  # .. calculate rating somehow ..
  outbox.send(rating)
end

rating_service = RatingService.new
rating_service.start
</code></pre>

<h3>Way better now:</h3>

<ul>
<li>Allows unit testing easily without mocks and fake objects: by peeking inside its inbox in unit tests instead, and checking that it received right message.</li>
<li>It is really hard to pack more responsibility to this, since it has no methods, it has just one body, that is responsible for processing exactly one message.</li>
</ul>


<p><em>You of course can encode something strange in message, and organize your own method dispatch mechanism through actors inbox, but that is just silly (usually).</em></p>

<h3>Easy to unit test:</h3>

<pre><code class="ruby"># creating actor, but not starting it
rating_actor = RatingCalculator.new

# dependency injection of rating actor
answer_actor = Answer.new(answer_id, rating_actor)
answer_actor.start

render_actor = Render.new(answer_actor)
render_actor.run
expect(rating_actor.inbox)
  .to include([comments, upvotes, downvotes, outbox])

# fake response from rating actor
outbox.send(3.5)
expect(render_actor).to render_rating(3.5)
</code></pre>

<p>In unit tests you start only one actor - actor under test, and all other actors just get instantiated correctly and passed in as a dependencies where needed. Since they are not started, they will not consume any messages from their inbox, which means that you can consume these inboxes from your unit test, and check that the messages that arrived at inboxes are expected.</p>

<h2>When the code is done</h2>

<ul>
<li>It works!</li>
<li>It is readable (future me will not curse me for writing this code)</li>
<li>It has no duplication</li>
<li>And it is as short as possible (while maintaining all of the above)</li>
</ul>


<h3>Code comments</h3>

<p>Basically a code smell (I&rsquo;m not talking about documentation comments)</p>

<p>Example:</p>

<pre><code class="ruby"># when user is active
if activity_service.has_events(user.id, min_date: 2.weeks.ago)
  &amp;&amp; !user.fraud?
</code></pre>

<p>Which is bad from more than one point of view, it literally should have been:</p>

<pre><code class="ruby">if user.active?
# or
if activity_service.user_is_active?(user)
# .. more variations can be here ..
# .. but all of them will be better ..
</code></pre>

<h3>If code needs comment:</h3>

<ul>
<li>it is not readable</li>
<li>it fails to communicate its intent</li>
</ul>


<p>You should be able to read the code and understand it. In that order: read -> understand.</p>

<p>You shouldn&rsquo;t interpret it in your head. You shouldn&rsquo;t have Ruby (or your favorite language here) instance running in your head.</p>

<h2>To sum it up</h2>

<ul>
<li>Inheritance is good only in very rare cases</li>
<li>Coupling and dependencies are not your friends, take them under control with dependency inversion &amp; injection</li>
<li>TDD as a shortest feedback cycle for your OO design</li>
<li>Write code in such way, that you would thank yourself for that in the future</li>
</ul>


<p>Recommended reading: &ldquo;Pragmatic Programmer: From Journeyman to Master&rdquo; by Andrew Hunt and David Thomas. It is insanely good, concise book with lots of awesome references to other resources.</p>

<h2>Thanks!</h2>

<p>If you have any questions or suggestions, you can always reach me out on twitter <a href="https://twitter.com/waterlink000">@waterlink000</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Can contracts.ruby Be Used in the Community With Duck Typing Culture?]]></title>
    <link href="http://waterlink.github.io/blog/2015/03/10/how-can-contracts-dot-ruby-be-used-in-the-community-with-duck-typing-culture/"/>
    <updated>2015-03-10T11:11:23+01:00</updated>
    <id>http://waterlink.github.io/blog/2015/03/10/how-can-contracts-dot-ruby-be-used-in-the-community-with-duck-typing-culture</id>
    <content type="html"><![CDATA[<p>So, given simple example:</p>

<pre><code class="ruby">Contract Num, Num =&gt; Num
def add(a, b)
  a + b
end
</code></pre>

<p>One can ask: &ldquo;But it is ruby, what about duck typing, I want just pass two things that have certain methods defined on them&rdquo;</p>

<p>And my answer, you can easily do that:</p>

<pre><code class="ruby">Contract RespondTo[:save, :has_valid?], RespondTo[:to_s] =&gt; Any
def assign_user_a_default_email(user, default_email)
  user.email = default_email unless user.has_valid?(:email)
  user.save
end
</code></pre>

<p>This is a built-in <code>RespondTo</code> contract. You can get a list of all of them here: <a href="http://egonschiele.github.io/contracts.ruby/#built-in-contracts">http://egonschiele.github.io/contracts.ruby/#built-in-contracts</a></p>

<p>If you have any questions, you can always ping me at twitter <a href="https://twitter.com/waterlink000">@waterlink000</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to contracts.ruby]]></title>
    <link href="http://waterlink.github.io/blog/2015/03/05/introduction-to-contracts-dot-ruby/"/>
    <updated>2015-03-05T23:55:40+01:00</updated>
    <id>http://waterlink.github.io/blog/2015/03/05/introduction-to-contracts-dot-ruby</id>
    <content type="html"><![CDATA[<h2>Slides from my talk on RUG-B Mar 2015</h2>

<p>A short introduction to a powerful Design by Contract technique and its implementation in ruby contracts.ruby.</p>

<p>Design by Contract allows one to do defensive programming in very elegant fashion, allows to set contracts on methods (expectations on input - arguments; and on output - return result) and invariants on classes. This allows to reason about code much much better.</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/45498085" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>


<h2>Classical defensive programming</h2>

<p>Lets start from simple code example:</p>

<pre><code class="ruby">def add(a, b)
  a + b
end
</code></pre>

<p>If you want to be really confident in implementation and usage of this method, you would probably use something like that:</p>

<pre><code class="ruby">def add(a, b)
  raise "a should be Fixnum or Float" unless a.is_a?(Fixnum) ||
    a.is_a?(Float)
  raise "b should be Fixnum or Float" unless b.is_a?(Fixnum) ||
    b.is_a?(Float)
  result = a + b
  raise "result should be Fixnum or Float" unless result.is_a?(Fixnum) ||
    result.is_a?(Float)
  result
end
</code></pre>

<p>Which definitely provides guarantees for input and output values.</p>

<p>But this code is extremely ugly, unmaintainable and unreadable. You can always extract <code>assert</code>-like helper methods, but it will not improve readability too much, you want to have just this simple <code>a + b</code> in the body of this method.</p>

<h2><code>gem "contracts"</code></h2>

<pre><code class="ruby">Contract Num, Num =&gt; Num
def add(a, b)
  a + b
end
</code></pre>

<p>This code does the same thing, but readability at a totally different level. Developers who know haskell may find this notation quite familiar.</p>

<h2>Design by contract</h2>

<p>When applying design by contract technique to development of any system or service, it allows you to answer the following questions:</p>

<ul>
<li>What does it expect? - Restrictions on input data for the system.</li>
<li>What does it guarantee? - Restrictions on output data (return value) of the system.</li>
<li>What does it maintain? - Restrictions on the inner state of the system (if your system is stateful, of course).</li>
</ul>


<h2>Benefits</h2>

<p>Benefits of being able to answer this questions and enforce them on a runtime level are:</p>

<ul>
<li>Clients of your system can be confident using its public APIs. They can be sure, that if they provide something wrong, then they will get a convenient error immediately. And they can be sure, that system returns the right value as a result.</li>
<li>System or service itself can be confident in its own operations. Implementation of system, that is covered with contracts, can assume that all the data flowing through the system is right and expected, and don&rsquo;t waste time (and lines of code, and sanity of the developer/maintainer) on different checks, conversions and so on (ie on defensive programming), it can just do what it needs to do, in confident, concise and convenient way, right up to the point.</li>
</ul>


<h2><code>assert</code> on steroids. And it is not only about types</h2>

<p>Up until now it may seem like some kind of runtime type-checking system. But it is not, it is way more powerful.</p>

<p>You can check for exact value:</p>

<pre><code class="ruby">Contract 200, nil, :get =&gt; "ok"
</code></pre>

<p>You can check for types:</p>

<pre><code class="ruby">Contract User, Time =&gt; Or[TrueClass, FalseClass]
</code></pre>

<p>You can check for anything that is available to you at runtime:</p>

<pre><code class="ruby">Contract ActiveUser =&gt; Rating
def rating_for(active_user)
  # .. calculate rating for active user ..
end

class ActiveUser
  def self.valid?(user)
    user.last_activity &gt; 2.weeks.ago
  end
end
</code></pre>

<p>As you expect when contract check on <code>active_user</code> argument happens, it will just call <code>ActiveUser.valid?(active_user)</code> and in case of falsy result will raise contract violation error.</p>

<h2>Very useful contract violation errors</h2>

<pre><code class="ruby">ContractError: Contract violation for argument 1 of 1:
    Expected: ActiveUser,
    Actual: #&lt;User:0x00000101059540&gt; {last_activity=27.11.2014}
    Value guarded in: Object::rating_for
    With Contract: ActiveUser =&gt; Rating
    At: (irb):10
    ... backtrace ...
</code></pre>

<p>This kind of errors tell you, what exactly you did wrong and where exactly you did it wrong. It is totally different from usual <code>NoMethodError :something for nil:NilClass</code>, because usually these kind of no-method errors can occur in totally different part of codebase comparing to where these errors actually were introduced. Contract violation will be issued exactly at the place where you passed invalid data into or out from your system. So that when you see a contract violation error, there is a high chance that you already know how to fix it.</p>

<h2>Pattern matching, sorta..</h2>

<p>You can say even method overloading. Very simple example:</p>

<pre><code class="ruby"># factorial in classic way
def factorial(n)
  if n == 1
    1
  else
    n * factorial(n - 1)
  end
end
</code></pre>

<pre><code class="ruby"># factorial using pattern matching
Contract 1 =&gt; 1
def factorial(_)
  1
end

Contract Num =&gt; Num
def factorial(number)
  number * factorial(number - 1)
end
</code></pre>

<p>When I saw this example, my first reaction was: &ldquo;Wow!&rdquo;. I was very excited about this feature.</p>

<h2>Something useful with pattern matching</h2>

<p>Last example was not particularly useful for our everyday development, but here you go.</p>

<p>Imagine you have a concurrent evented system, that needs to make asynchronous requests to some external http service(s). You may eventually end up with handler functions like these:</p>

<pre><code class="ruby"># Classical way
def handle_response(status, response)
  if status == 200
    transform_response(JSON.parse(response))
  else
    wrap_in_error(status, response)
  end
end
</code></pre>

<pre><code class="ruby"># And using pattern matching:
Contract 200, JsonString =&gt; JsonString
def handle_response(status, response)
  transform_response(JSON.parse(response))
end

Contract Fixnum, String =&gt; JsonString
def handle_response(status, response)
  wrap_in_error(status, response)
end
</code></pre>

<h2>Limitless benefits</h2>

<ul>
<li>All your input data is consistent</li>
<li>All data flows inside of your system are consistent</li>
<li>State of your system is consistent</li>
<li>Output of your system is consistent (or it is a contract violation error)</li>
<li>Blows up loudly on any logical error in your system</li>
</ul>


<p>Last point is extremely important, because sometimes logical errors in classical programs will not lead to any failure at all, they will just do the wrong thing. For example, transfer money to wrong bank account. In such mission critical systems it is really important to fail fast to not allow error to propagate throughout your system.</p>

<h2>Caveats: Performance</h2>

<table>
<thead>
<tr>
<th style="text-align:left;">Benchmark</th>
<th style="text-align:left;">Slowdown</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"><code>a+b</code></td>
<td style="text-align:left;">900% slowdown</td>
</tr>
<tr>
<td style="text-align:left;">production system with network IO</td>
<td style="text-align:left;">5-10% slowdown</td>
</tr>
<tr>
<td style="text-align:left;"><code>NO_CONTRACTS=1</code></td>
<td style="text-align:left;">0% slowdown</td>
</tr>
</tbody>
</table>


<p><p/></p>

<p>First benchmark is simple comparision of <code>a + b</code> with and without contract. Since <code>a + b</code> itself is very fast, then the slowdown is huge. But if you try to benchmark any real world system, that actually does something useful (communicates to other services through network for example), then slowdown is very very small.</p>

<p>And you have ability to disable contracts in production with <code>NO_CONTRACTS=1</code> environment variable. But beware, you lose extremely important benefit of blowing up on logical error immediately before letting error propagate. This benefit itself outweights these 5-10%, at least for me.</p>

<h2>Useful links</h2>

<ul>
<li><a href="https://github.com/egonSchiele/contracts.ruby">Github</a></li>
<li><a href="http://egonschiele.github.io/contracts.ruby">Nice tutorial</a></li>
<li><a href="https://github.com/egonSchiele">Creator</a></li>
<li><a href="https://github.com/waterlink">Me, co-maintainer</a></li>
</ul>


<p>If you have any questions or suggestions, you can always reach me out on twitter <a href="https://twitter.com/waterlink000">@waterlink000</a>. If you have any issues with using <code>contracts.ruby</code>, you can always create an <a href="https://github.com/egonSchiele/contracts.ruby/issues">issue on github</a> and Pull Requests are welcome.</p>
]]></content>
  </entry>
  
</feed>
